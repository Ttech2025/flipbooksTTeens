var textForPages = ["Desarrollo                  Web 2                       Clase 09","Clase N° 9 | Evento y Promesas                       Temario:                      ●   Eventos                    ●   Promesas","Eventos                    Los eventos en JavaScript son acciones o sucesos que ocurren en una página web, como la                interacción del usuario con elementos HTML, como hacer clic en un botón, mover el mouse                sobre una imagen, presionar una tecla, entre otros. Estos eventos activan la ejecución de                código JavaScript para responder de manera específica a la acción realizada.                  Algunos de estos eventos son:                      ●   Click: Ocurre cuando se hace clic en un elemento.                    ●   Mouseover: Ocurre cuando el ratón se mueve sobre un elemento.                    ●   Keydown: Ocurre cuando una tecla del teclado es presionada.                    ●   Submit: Ocurre cuando se envía un formulario.                    ●   Load: Ocurre cuando se carga completamente un documento o un recurso.                 Para saber cuándo el usuario realiza una interacción con el sitio web, es decir, escuchar las                interacciones, se utiliza EventListener.                  Importante: Para seleccionar un solo elemento utilizamos getElementById si tenemos un                conjunto de elementos(Array) usamos getElementsByTagName,                getElementsByClassName.                 Este último, debemos utilizar el for para recorrerlo y utilizar cada elemento dentro del array.                    Veamos algunos ejemplos:                    Evento Click                      ●   Vamos a seleccionar con getElementById y hacer que se ejecute un evento                  HTML:                  <button id=\"miElemento\">Click Aqui</button>","JS:                 // Seleccion un solo Elemento [getElementByID]                let miElemento = document.getElementById(\"miElemento\");                // Añadimos el Evento (tipoDeEvento, funcion que se realiza)                miElemento.addEventListener(\"click\", function()) {                     console.log(\"Se hizo clic en el elemento.\");                });                        ●   Vamos a seleccionar con getElementsByClassName, también podemos realizarlo                        con getElementsByTagName. Esto hace que se ejecute un evento para cada                        elemento del array.                  HTML:                  <h2 class=\"misTitulos\">Titulo 1 </hr>                <div>                     <h2 class=\"misTitulos\">Tirulo 2</h2>                </div>                  JS:                // Seleccion Conjunto de Elementos [getElementsByTagName,                getElementsByClassName]                let titulos = dicument.getElementsByClassName(\"misTirulos\");                //Como es un Array, lo recorremos con el for                for (let i = 0; i < titulos.length; i++) {                     // Añadimos el Evento (tipoDeEvento, funcion que se realiza)                     titulos[i].addEventListener(\"click\", function() {                                console.log(\"Se hizo clic en el elemento.\" + i );                     });                }","Evento MouseOver y MouseOut                 Es parecido a la función hover de pseudoclases.                  HTML:                 <h1 id=\"titulo\">Titulo Principal</h1>                 JS:                  let miTitulo = document.getElementById(\"titulo\");                miTitulo.addEventListener('mouseover', function() {                     miTitulo.style.backgroundColor = 'ligthcoral' ;                });                miTirulo.addEventListener('mouseout', function() {                     miTitulo.style.backgroundColor = 'lightblue';                });                    Promesas                   En JavaScript, las Promesas son como promesas en la vida real. Imagina que le pides a un                amigo que haga algo por ti. Esa tarea podría llevar tiempo, y no quieres quedarte                esperando. Entonces, tu amigo te hace una promesa: te dará un resultado (éxito o fallo) en                algún momento.                 En términos más técnicos, las Promesas en JavaScript son útiles cuando hacemos cosas                que pueden tomar un tiempo, como cargar datos desde una base de datos o realizar una                solicitud a un servidor. Te permiten decir \"haz esto y avísame cuando hayas terminado, ya                sea bien o mal\".                  Lo mejor de las Promesas es que hacen que el código sea más fácil de entender,                especialmente cuando tienes muchas tareas que ocurren una tras otra. Evitan que tu código                se vea como un \"infierno de devolución de llamada\" (callback hell), haciendo que la lógica                asíncrona sea más legible y manejable.","La estructura básica de una Promesa se compone de tres estados:                      1. Pending (pendiente): Estado inicial, la Promesa está en curso.                    2. Fulfilled (cumplida): La operación se completó exitosamente.                    3. Rejected (rechazada): La operación ha fallado.                 // Crear una Promesa                let miPromesa = new Promise(function(resolve, reject) {                       // simular una tarea que toma tiempo (por ejemplo, una solicitud a                un servidor)                     setTimeout(function() {                            let exito = true; // Cambiar a false para simular un fallo                             if (exito) {                                resolve(\"La terea fue completada con éxito\");                          } else {                                reject(\"Hubo un problema al completar la terea\");                          }                     }, 2000); // Simulamos una tarea que toma 2 segundos                });                  // Utilizar la Promesa                miPromesa.then(function(resultado) {                     console.log(\"Éxito:\", resultado);                })                .catch(function(error) {                    console.log(\"Error:\", error);                });                  En este ejemplo, se crea una promesa que simula una operación asíncrona (en este caso,                un temporizador). Si la operación es exitosa, se llama a resolve con el resultado; si falla, se","llama a reject con un mensaje de error. Luego, se utiliza el método .then para manejar el                caso de éxito y el método .catch para manejar el caso de error.                  Las Promesas son una parte integral de la programación asíncrona en JavaScript y se                utilizan ampliamente, especialmente en el contexto de solicitudes a servidores,                manipulación de archivos y otras operaciones asíncronas.                     ❓Pregunta de reflexión                  En el contexto de las Promesas;                 ¿Cómo crees que facilitan el manejo de operaciones asíncronas en comparación con el uso                de callbacks?                  ¿Puedes mencionar una situación práctica donde sería beneficioso utilizar eventos en                JavaScript para mejorar la interactividad de una página web?                        Desafío #9                 Manipular el DOM implica modificar y acceder a elementos del DOM, o crear nuevos con                createElement.                 Manipulando el DOM:                      1. Crear un botón con createElement                      2. Sumarle al botón creado el ID ‘btnCarrito’.                      3. Sumar con .innetHTML el texto que tendrá el botón en su interior.                        Ejemplo: “Agregar al carrito”.                      4. Luego, escuchar con addEventListener el evento “click” sobre el botón generado,                        asegurando que la función que vas a crear dispare una salida en un elemento HTML                        cuando se presione.","5. Esto lo podras lograr creando un nuevo elemento <h3> con createElement y                        modificando texto del botón con .innerHTML                        Ejemplo: “Agregado”                 Una vez hecho esto; solo queda agregar el boton generado con .apprendChild                      TIP: El evento puede asociarse con addEventListener, o la propiedad onclick.",""];